// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id @default(cuid())
  email String  @unique
  password String?
  name  String?
  image String?

  accounts      Account[]
  sessions      Session[]

  // onboarding related information
  onboardingEmailSent Boolean @default(false)
  isUserOnboarded     Boolean @default(false)

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Project   Project[]

  // subscription related information
  stripeSubscriptionId String @default("")
  stripeCustomerId     String @default("")
  stripePriceId        String @default("")
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
}
 
model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@id([identifier, token])
}

model Project {
  id          String    @id @default(cuid())
  name        String
  description String?
  apiKey      APIKey    @relation(fields: [apiKeyId], references: [id])
  apiKeyId    String
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  Channel     Channel[]
}

model APIKey {
  id        String    @id @default(cuid())
  name      String
  key       String
  scope     String
  Project   Project[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Channel {
  id        String   @id @default(cuid())
  name      String
  projectId String
  project   Project  @relation(fields: [projectId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Event     Event[]
}

model Event {
  id          String   @id @default(cuid())
  name        String
  description String
  channelId   String
  channel     Channel  @relation(fields: [channelId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
